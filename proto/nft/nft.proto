syntax = "proto3";
package cosmos.nft.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/nft";

// BaseNFT defines a non-fungible token
message NFT {
    // class_id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
    string class_id = 1;

    // id defines the unique identification of NFT
    string id = 2;

    // uri defines NFT's metadata storage address outside the chain
    string uri = 3;

    // uri_hash is a hash of the document pointed to uri
    string uri_hash = 4;

    // data is the metadata of the NFT
    google.protobuf.Any data = 10;
}

// Class defines a type of NFT
message Class {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_getters_all) = false;

    string id = 1;
    string name = 2;
    string schema = 3;
    string creator = 4;
    string symbol = 5;
    bool mint_restricted = 6 ;
    bool update_restricted = 7 ;
}

// IDCollection defines a type of collection with specified ID
message IDCollection {
    option (gogoproto.equal) = true;

    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    repeated string token_ids = 2 [ (gogoproto.moretags) = "yaml:\"token_ids\"" ];
}

// Owner defines a type of owner
message Owner {
    option (gogoproto.equal) = true;

    string address = 1;
    repeated IDCollection id_collections = 2 [ (gogoproto.moretags) = "yaml:\"idcs\"", (gogoproto.customname) = "IDCollections", (gogoproto.nullable) = false ];
}

// Collection defines a type of collection
message Collection {
    option (gogoproto.equal) = true;

    Class denom = 1 [ (gogoproto.nullable) = false ];
    repeated BaseNFT nfts = 2 [ (gogoproto.customname) = "NFTs", (gogoproto.nullable) = false ];
}